public class StringProblems {

    // Given a string, find the first non-repeating character in it and return its
    // index. If it doesn't exist, return -1.

    // Examples:

    // s = "leetcode"
    // return 0.

    // s = "loveleetcode"
    // return 2.

    // Note: You may assume the string contains only lowercase English letters.

    public int firstUniqChar(String s) {
        if (s.isEmpty())
            return -1;
        // array to store occurance of each character
        // at index (int)char-(int)'a'
        // i.e. from 0-25
        int[] charCount = new int[26];

        // counting the occurance of each character
        for (char ch : s.toCharArray()) {
            charCount[(int) ch - (int) 'a'] += 1;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < charCount.length; i++) {
            if (charCount[i] == 1) {

                // if occurance is 1
                // means it is unique
                // hence computing the ndex first unique character
                int index = s.indexOf((char) (97 + i));
                if (index < min)
                    min = index;
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;
    }

    // You are given two strings s and t.

    // String t is generated by random shuffling string s and then add one more
    // letter at a random position.

    // Return the letter that was added to t.

    // Example 1:

    // Input: s = "abcd", t = "abcde"
    // Output: "e"
    // Explanation: 'e' is the letter that was added.

    // Example 2:

    // Input: s = "", t = "y"
    // Output: "y"

    // Example 3:

    // Input: s = "a", t = "aa"
    // Output: "a"

    // Example 4:

    // Input: s = "ae", t = "aea"
    // Output: "a"

    public char findTheDifference(String s, String t) {
        // the above array approach can be used here too

        int[] charCount = new int[26];

        // counting the occurance of each character
        for (char ch : s.toCharArray()) {
            charCount[(int) ch - (int) 'a'] += 1;
        }
        for (char ch : t.toCharArray()) {
            charCount[(int) ch - (int) 'a'] -= 1;
        }

        for (int i = 0; i < charCount.length; i++) {

            // for the character that is extra in 't' string
            // its count will be negative
            if (charCount[i] < 0) {
                return (char) (97 + i);
            }
        }
        return 'a';
    }

    // Given two strings s and t, check if s is a subsequence of t.

    // A subsequence of a string is a new string that is formed from the original
    // string by deleting some (can be none) of the characters without disturbing
    // the relative positions of the remaining characters. (i.e., "ace" is a
    // subsequence of "abcde" while "aec" is not).

    public boolean isSubsequence(String s, String t) {
        if (s.length() > t.length())
            return false;
        if (s.isEmpty())
            return true;
        int j = 0;
        for (int i = 0; i < s.length(); i++) {
            char ch1 = s.charAt(i);

            // if more characters remain in s but not in t
            // simple return false
            // else continue to check
            if (j < t.length()) {
                char ch2 = t.charAt(j);
                // if same then move on
                if (ch1 == ch2) {
                    j += 1;
                } else {
                    // increment j pointer until ch1 is same as ch2 or until the end of t string
                    while (ch1 != ch2 && j < t.length() - 1) {
                        j += 1;
                        ch2 = t.charAt(j);
                    }

                    // we continue further if both are same
                    if (ch1 == ch2) {
                        j += 1;
                        continue;
                    } else {
                        // this means we reached the end of the t string
                        // hence return false
                        return false;
                    }
                }
            } else
                return false;

        }
        return true;
    }

    public static void main(String[] args) {
        StringProblems firstUniqueChar = new StringProblems();
        System.out.println(firstUniqueChar.isSubsequence("bb", "ahbgdc"));
    }
}
